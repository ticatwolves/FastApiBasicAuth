name: Release (semantic-release + hatchling + twine)

on:
  push:
    branches: ["main"]

permissions:
  contents: write
  packages: write
  id-token: write

jobs:
  test:
    runs-on: ubuntu-latest
    outputs:
      tests_passed: ${{ steps.tests.outcome }}

    steps:
    
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'
      
      - name: Install dev dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt || true
          pip install pytest

      - name: Run tests
        id: tests
        run: |
          pytest -q
  
  release:
    needs: test
    runs-on: ubuntu-latest
    if: needs.test.result == 'success'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'
      
      - name: Install tooling
        run: |
          python -m pip install --upgrade pip
          pip install python-semantic-release build twine
      
      - name: Run semantic-release to bump version & create tag
        uses: python-semantic-release/python-semantic-release@v9.8.8
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Build distributions (hatchling / PEP517)
        run: |
          python -m build

      - name: Publish to TestPyPI
        if: ${{ secrets.TEST_PYPI_API_TOKEN != '' }}
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.TEST_PYPI_API_TOKEN }}
        run: |
          python -m twine upload --repository-url https://test.pypi.org/legacy/ dist/*

      - name: Publish to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
        run: |
          python -m twine upload dist/*
